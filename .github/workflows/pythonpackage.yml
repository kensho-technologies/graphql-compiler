name: Test and lint Python package

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
    branches:
      - "*"
jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
        lint-flags:
          - "--run-only-fast-linters"
          - "--run-only-pylint"
          - "--run-only-mypy"
          - "--run-only-bandit"
          - "--run-only-sphinx-build"
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install binary dependencies
        run: |
          bash -c "wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -"
          sudo add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/"$(lsb_release -r -s)"/prod.list)"
          sudo apt-get update
          sudo apt-get install unixodbc-dev python-mysqldb libmysqlclient-dev
          ACCEPT_EULA=Y sudo apt-get install msodbcsql17
      - name: Ensure pip, setuptools, pipenv are latest
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools pipenv
          echo "${pythonLocation}/lib/python${{ matrix.python-version }}/site-packages"
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Cache the Python dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
      - name: Install Python dependencies
        run: |
          pipenv install --dev --deploy --system
          pip install -e .
      - name: Run lint checks
        run: |
          pipenv run ./scripts/lint.sh ${{ matrix.lint-flags }}
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install binary dependencies
        run: |
          bash -c "wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -"
          sudo add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/"$(lsb_release -r -s)"/prod.list)"
          sudo apt-get update
          sudo apt-get install unixodbc-dev python-mysqldb libmysqlclient-dev
          ACCEPT_EULA=Y sudo apt-get install msodbcsql17
      - name: Start database docker containers
        run: |
          docker-compose up -d
      - name: Ensure pip, setuptools, pipenv are latest
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools pipenv
          echo "${pythonLocation}/lib/python${{ matrix.python-version }}/site-packages"
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Cache the Python dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
      - name: Install Python dependencies
        run: |
          pipenv install --dev --deploy --system
          pip install -e .
      - name: Test with pytest
        run: |
          pytest --cov=graphql_compiler graphql_compiler/tests
          codecov
